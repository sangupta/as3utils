<?xml version="1.0" encoding="utf-8"?>

<project name="as3utils" basedir="./../" default="release">

	<property file="build/build.properties" />

	<taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />
	
	<tstamp>
		<format property="BUILD.TIME" pattern="yyyy-MM-dd HH:mm:ss" />
	</tstamp>

	<target name="compile">
		<exec executable="${FLEX_HOME}/bin/acompc.bat" dir="." failonerror="true" failifexecutionfails="true">
			<arg value="-output" />
			<arg value="${release.dir}/lib/${project.name}.swc" />
			
			<arg value="-include-sources" />
			<arg value="${src.dir}" />
			
			<arg value="-metadata.creator" />
			<arg value="${user.name}" />
			
			<arg value="-metadata.title" />
			<arg value="as3utils" />
			
			<arg value="-metadata.date" />
			<arg value="${BUILD.TIME}" />
			
			<arg value="-compiler.optimize" />
			<arg value="-compiler.omit-trace-statements" />
			
			<arg value="-compiler.strict" />
			
			<arg value="-compiler.external-library-path" />
			<arg value="${FLEX_HOME}/frameworks/libs" />
			
			<arg value="-compiler.external-library-path" />
			<arg value="${FLEX_HOME}/frameworks/libs/air" />
			
			<arg value="-compiler.external-library-path" />
			<arg value="${FLEX_HOME}/frameworks/locale/{locale}" />
		</exec>
	</target>

	<target name="clean">
		<delete dir="${release.dir}" />
		<mkdir dir="${release.dir}" />
		<mkdir dir="${report.dir}" />
	</target>

	<target name="asdocs">
		<exec executable="${FLEX_HOME}/bin/aasdoc.bat" dir="." failonerror="true" failifexecutionfails="true">
			<arg line="-doc-sources ${src.dir}" />
			<arg line="-package-description-file=build/packageDescription.xml" />
			<arg line="-source-path ${src.dir}" />
			<arg line="-output ${release.dir}/docs" />
			<arg line="-window-title &quot;${doc.window.title}&quot;" />
		</exec>
	</target>

	<target name="compileTests">
		<mxmlc file="${test.src.dir}/${test.application.name}.mxml" output="${release.dir}/${test.application.name}.swf">
			<load-config filename="${FLEX_HOME}/frameworks/air-config.xml" />

			<source-path path-element="${src.dir}" />
			<source-path path-element="${test.src.dir}" />

			<!-- The TestRunner needs the flexunit libraries in the build/libs folder -->
			<library-path dir="${build.libs.dir}" append="true">
				<include name="*.swc" />
			</library-path>

			<!-- Sets java.awt.headless=true so font compilation works in headless environments -->
			<compiler.headless-server>true</compiler.headless-server>
		</mxmlc>
	</target>

	<target name="runTests">
		<!-- Run FlexUnit Ant Task to execute the unit tests and capture reporting data -->
		<taskdef resource="flexUnitTasks.tasks" classpath="${build.libs.dir}/flexUnitTasks-4.0.0.jar" />
		<flexunit swf="${release.dir}/${test.application.name}.swf" toDir="${report.dir}" haltonfailure="false" verbose="false" localTrusted="false" player="air" />

		<!-- Generate html JUnit-style reports based on test results -->
		<junitreport todir="${report.dir}">
			<fileset dir="${report.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${report.html.dir}" />
		</junitreport>
	</target>

	<target name="test" depends="compileTests, runTests" />

	<target name="build" depends="clean, test, compile, asdocs" />
	
	<target name="release" depends="build" description="Build and release the latest version of the library">
		<!-- clean previous library -->
		<delete file="${project.name}-${build.version}.zip" />
		
		<!-- clean the staging folder -->
		<delete file="${release.dir}/UnitTest.swf" />
		<delete file="${release.dir}/flexUnitDescriptor.xml" />
		<delete dir="${release.dir}/reports" />
		
		<!-- copy stuff to staging folder -->
		<copy todir="${release.dir}/src">
			<fileset dir="${src.dir}" />
		</copy>
		
		<copy todir="${release.dir}/tests">
			<fileset dir="${test.src.dir}" />
		</copy>
			
		<copy todir="${release.dir}">
			<fileset file="LICENSE" />
			<fileset file="README.md" />
		</copy>
			
		<!-- package the ZIP file -->
		<zip destfile="${project.name}-${build.version}.zip">
			<fileset dir="${release.dir}" defaultexcludes="false"/>
		</zip>
	</target>

</project>
